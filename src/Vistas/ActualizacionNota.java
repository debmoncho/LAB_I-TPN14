
package Vistas;

import AccesoADatos.*;
import entidades.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Blas
 */
public class ActualizacionNota extends javax.swing.JInternalFrame {

    private List<Materia> listaM;
    private List<Alumno> listaA;
    private List<Inscripcion> listaI;
    
    
    private InscripcionData inscData;
    private MateriaData mData;
    private AlumnoData aData;
    
    private Inscripcion insc;
    
    private DefaultTableModel modelo;
    
    /**
     * Creates new form ActualizacionNota
     */
    
    
    public ActualizacionNota() {
        initComponents();
        
        aData = new AlumnoData();
        listaA = aData.listarAlumno();
        modelo = new DefaultTableModel();
        inscData = new InscripcionData();
        mData = new MateriaData();
        cargarAlumnos();
        armarCabecera();
    }

    private void cargarAlumnos(){
    
        for(Alumno item : listaA) {
        
            cboxAlumno.addItem(item);
        }
    
    }
    
    private void armarCabecera() {
    
        ArrayList<Object> filaCabecera = new ArrayList<>();
        filaCabecera.add("Id");
        filaCabecera.add("Nombre");
        filaCabecera.add("Nota");
        
        for(Object it : filaCabecera){
        
            modelo.addColumn(it); 
        }
        jTabla.setModel(modelo);
    }
    
    private void borrarFilasTabla(){
    
        int indice = modelo.getRowCount() - 1;
        for(int i = indice; i >= 0; i--){
        
            modelo.removeRow(i);
        }
    }
    
    private void cargaDatosInscriptas() {
    
        
        /*Dejamos esta parte del codigo desactivado por que no estaba funcionando adecuadamente
        Mostraba TODAS las inscripciones sin discriminar por alumno, y cuando se cambiaba
        entre alumnos, no se alteraba el listado de materias y notas*/

//       Alumno select = (Alumno)cboxAlumno.getSelectedItem();
//       listaI = inscData.obtenerInscripciones();
//       
//       for (Inscripcion m : listaI){
//       
//           //modelo.addRow(new Object[] {m.getMateria().getIdMateria(),m.getAlumno().getIdAlumno(), m.getNota()});
//           modelo.addRow(new Object[] {m.getMateria().getIdMateria(), m.getMateria().getNombre() , m.getNota()});
//       }     


        /* este codigo muestra adecuadamente la informacion*/

        Alumno select = (Alumno) cboxAlumno.getSelectedItem();
        
        if (select != null) {

            listaI = inscData.obtenerInscripcionesPorAlumno(select.getIdAlumno());

            borrarFilasTabla();

            for (Inscripcion m : listaI) {
                modelo.addRow(new Object[]{m.getMateria().getIdMateria(), m.getMateria().getNombre(), m.getNota()});
            }
        }




    }
    
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cboxAlumno = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTabla = new javax.swing.JTable();
        jbGuardar = new javax.swing.JButton();
        jbSalir = new javax.swing.JButton();

        jLabel1.setText("Carga de Notas");

        jLabel2.setText("Seleccione un Alumno:");

        cboxAlumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboxAlumnoActionPerformed(evt);
            }
        });

        jTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTabla);

        jbGuardar.setText("Guardar");
        jbGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuardarActionPerformed(evt);
            }
        });

        jbSalir.setText("Salir");
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(64, 64, 64)
                                .addComponent(cboxAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(jbGuardar)
                        .addGap(124, 124, 124)
                        .addComponent(jbSalir)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(cboxAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbGuardar)
                    .addComponent(jbSalir))
                .addContainerGap(85, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
        
        this.dispose();
        
    }//GEN-LAST:event_jbSalirActionPerformed

    private void jbGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGuardarActionPerformed

        int filaSeleccionada = jTabla.getSelectedRow();
        
        if(filaSeleccionada != -1){
            Alumno a = (Alumno)cboxAlumno.getSelectedItem();
            
            System.out.println("alumno " + a);
            
            int idMateria = (Integer)modelo.getValueAt(filaSeleccionada, 0);
            
            
            // Obt√©n el valor de la columna como Object
            Object value = modelo.getValueAt(filaSeleccionada, 2);

            // Convertir el valor a String de forma segura
            String n;
            if (value instanceof Double) {
                n = String.valueOf(value);
            } else if (value instanceof String) {
                n = (String) value;
            } else {
                throw new IllegalArgumentException("Tipo de dato inesperado en la columna 2: " + value.getClass().getName());
            }

            
            System.out.println("id materia: " + idMateria + " - y nota: " + n);
            
            
            // Convertir el String a double
            double notaDouble = Double.parseDouble(n);
            
            // Convertir el double a int si es necesario
            int nota = (int) notaDouble;
            
            System.out.println("Nota: " + nota);
            
            inscData.actualizarNota(a.getIdAlumno(), idMateria, nota);
            
            borrarFilasTabla();
        }
        
        
    }//GEN-LAST:event_jbGuardarActionPerformed

    private void cboxAlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboxAlumnoActionPerformed
        // TODO add your handling code here:
        borrarFilasTabla();
        cargaDatosInscriptas();
    }//GEN-LAST:event_cboxAlumnoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cboxAlumno;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTabla;
    private javax.swing.JButton jbGuardar;
    private javax.swing.JButton jbSalir;
    // End of variables declaration//GEN-END:variables
}
